class SinglyLinkedList {

    // Node structure
    class Node {
        int data;
        Node next;
        Node(int d) {
            data = d;
            next = null;
        }
    }

    Node head = null; // head of list

    // 1. Display (Traversal)
    public void display() {
        Node temp = head;
        if (head == null) {
            System.out.println("List is empty.");
            return;
        }
        while (temp != null) {
            System.out.print(temp.data + " -> ");
            temp = temp.next;
        }
        System.out.println("NULL");
    }

    // 2. Search
    public boolean search(int key) {
        Node temp = head;
        while (temp != null) {
            if (temp.data == key) {
                return true; // found
            }
            temp = temp.next;
        }
        return false; // not found
    }

    // 3. Insertion
    // (a) At Beginning
    public void insertAtBeginning(int data) {
        Node newNode = new Node(data);
        newNode.next = head;
        head = newNode;
    }

    // (b) At End
    public void insertAtEnd(int data) {
        Node newNode = new Node(data);
        if (head == null) {
            head = newNode;
            return;
        }
        Node temp = head;
        while (temp.next != null) {
            temp = temp.next;
        }
        temp.next = newNode;
    }

    // (c) At Position (1-based index)
    public void insertAtPosition(int data, int pos) {
        if (pos <= 0) {
            System.out.println("Invalid position!");
            return;
        }
        Node newNode = new Node(data);
        if (pos == 1) { // beginning
            newNode.next = head;
            head = newNode;
            return;
        }
        Node temp = head;
        for (int i = 1; temp != null && i < pos - 1; i++) {
            temp = temp.next;
        }
        if (temp == null) {
            System.out.println("Position out of range.");
            return;
        }
        newNode.next = temp.next;
        temp.next = newNode;
    }

    // 4. Deletion
    // (a) At Beginning
    public void deleteAtBeginning() {
        if (head == null) return;
        head = head.next;
    }

    // (b) At End
    public void deleteAtEnd() {
        if (head == null) return;
        if (head.next == null) {
            head = null;
            return;
        }
        Node temp = head;
        while (temp.next.next != null) {
            temp = temp.next;
        }
        temp.next = null;
    }

    // (c) At Position (1-based index)
    public void deleteAtPosition(int pos) {
        if (head == null || pos <= 0) return;
        if (pos == 1) {
            head = head.next;
            return;
        }
        Node temp = head;
        for (int i = 1; temp != null && i < pos - 1; i++) {
            temp = temp.next;
        }
        if (temp == null || temp.next == null) return;
        temp.next = temp.next.next;
    }

    // Main method to test
    public static void main(String[] args) {
        SinglyLinkedList list = new SinglyLinkedList();

        // Insert elements
        list.insertAtEnd(10);
        list.insertAtEnd(20);
        list.insertAtEnd(30);
        list.insertAtBeginning(5);
        list.insertAtPosition(15, 3);

        System.out.println("Linked List after insertions:");
        list.display();

        // Search
        System.out.println("Search 20: " + list.search(20));
        System.out.println("Search 50: " + list.search(50));

        // Delete operations
        list.deleteAtBeginning();
        list.deleteAtEnd();
        list.deleteAtPosition(2);

        System.out.println("Linked List after deletions:");
        list.display();
    }
}
